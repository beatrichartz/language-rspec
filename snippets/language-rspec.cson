'.source.ruby.rspec':
  'describe (String)':
    'prefix': 'des'
    'body': "describe '${1:subject}' do\n  $0\nend"
  'describe (type)':
    'prefix': 'dest'
    'body': 'describe ${1:Type} do\n  $0\nend'
  'describe (type, string)':
    'prefix': 'dests'
    'body': "describe ${1:Type}, '${2:description}' do\n  $0\nend"
  'it (does something)':
    'prefix': 'it'
    'body': "it '${1:does something}'${2: do\n  $0\nend}"
  'Matcher (Custom)':
    'prefix': 'matc'
    'body': 'class ${1:ReverseTo}\n  def initialize($3)\n    @$3 = $3\n  end\n\n  def matches?(actual)\n    @actual = actual\n    # Satisfy expectation here. Return false or raise an error if it\'s not met.\n    ${0:@actual.reverse.should == @$3}\n    true\n  end\n\n  def failure_message_for_should\n    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn\'t"\n  end\n\n  def failure_message_for_should_not\n    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"\n  end\nend\n\ndef ${2:reverse_to}(${3:expected})\n  $1.new($3)\nend'
  'Matcher (DSL)':
    'prefix': 'mat'
    'body': 'RSpec::Matchers.define :${1:name} do |${2:expected}|\n  match do |${3:actual}|\n    $3.$1?($2)\n  end\nend\n'
  'Require spec_helper':
    'prefix': 'reqs'
    'body': 'require \'spec_helper\'\n\n'
  'controller_name':
    'prefix': 'cont'
    'body': 'controller do\n  $0\nend'
  'controller_name':
    'prefix': 'conn'
    'body': 'controller_name :${1:controller}'
  'and_raise':
    'prefix': 'anr'
    'body': 'and_raise(${1:exception})'
  'and_return with block':
    'prefix': 'anrb'
    'body': 'and_return { $1 }'
  'and_return with args':
    'prefix': 'andra'
    'body': 'and_return(${1:value})'
  'and_throw':
    'prefix': 'ant'
    'body': 'and_throw(${1:sym})'
  'and_yield':
    'prefix': 'any'
    'body': 'and_yield(${1:values})'
  'and yield block':
    'prefix': 'anyb'
    'body': 'and_yield do\n  $0\nend'
  'any_number_of_times':
    'prefix': 'annot'
    'body': 'any_number_of_times'
  'at_least':
    'prefix': 'atl'
    'body': 'at_least(${1:n}).times'
  'at_most':
    'prefix': 'atm'
    'body': 'at_most(${1:n}).times'
  'change':
    'prefix': 'ch'
    'body': 'change { $1 }'
  'configure':
    'prefix': 'conf'
    'body': 'RSpec.configure do |config|\n  config.$0\nend'
  'context':
    'prefix': 'con'
    'body': 'context \'${1:context}\' do\n  $0\nend'
  'expect':
    'prefix': 'ex'
    'body': 'expect(${1:subject}).${2:not_}to ${3:${4:eq(${5:object})}}'
  'expect with block':
    'prefix': 'exb'
    'body': 'expect { ${1:target} }.${2:not_}to ${3:raise_error}'
  'feature':
    'prefix': 'sce'
    'body': 'scenario "${1:scenario description}" do\n  $0\nend'
  'it (should do something)':
    'prefix': 'its'
    'body': 'it \'should ${1:do something}\'${2: do\n  $0\nend}'
  'let':
    'prefix': 'let'
    'body': 'let(:${1:instance}) { $0 }'
  'let!'
    'prefix': 'letb'
    'body': 'let!(:${1:instance}) { $0 }'
  'mock':
    'prefix': 'moc'
    'body': '${1:var} = mock(:${2:mock_name}${3:, null_object: true})\n$0'
  'mock_model':
    'prefix': 'mm'
    'body': 'mock_model(${1:model})$0'
  'once':
    'prefix': 'on'
    'body': 'once'
  'expect to be_success':
    'prefix': 'exsucc'
    'body': 'expect(${1:subject}).${2:not_}to be_success\n$0'
  'before':
    'prefix': 'bef'
    'body': 'before${1:(${2::each})} do\n  $0\nend'
  'expect match':
    'prefix': 'exm'
    'body': 'expect(${1:target}).${2:not_}to match(/${3:regexp}/)\n$0'
  'expect be':
    'prefix': 'exb'
    'body': 'expect(${1:target}).${2:not_}to be(${3:result})\n$0'
  'expect be_kind_of':
    'prefix': 'exko'
    'body': 'expect(${1:target}).${2:not_}to be_a_kind_of(${3:klass})\n$0'
  'expect be_instance_of':
    'prefix': 'exbio'
    'body': 'expect(${1:target}).${2:not_}to be_instance_of(${3:klass})\n$0'
  'expect be_close':
    'prefix': 'exbc'
    'body': 'expect(${1:target}).${2:not_}to be_close(${3:result}, ${4:tolerance})\n$0'
  'expect be_redirect':
    'prefix': 'exbr'
    'body': 'expect(${1:target}).${2:not_}to be_redirect\n$0'
  'expect equal':
    'prefix': 'she'
    'body': 'expect(${1:target}).${2:not_}to equal(${2:value})\n$0'
  'expect have':
    'prefix': 'exh'
    'body': 'expect(${1:target}).${2:not_}to have(${3:num}).${4:things}\n$0'
  'expect have_at_least':
    'prefix': 'exhal'
    'body': 'expect(${1:target}).${2:not_}to have_at_least(${3:num}).${4:things}\n$0'
  'expect have_at_most':
    'prefix': 'exham'
    'body': 'expect(${1:target}).${2:not_}to have_at_most(${3:num}).${4:things}\n$0'
  'expect predicate':
    'prefix': 'expred'
    'body': 'expect(${1:target}).${2:not_}to ${3:be_${4:predicate}} $5\n$0'
  'expect raise_error':
    'prefix': 'exre'
    'body': 'expect{ ${1:target} }.${2:not_}to raise_error(${4:error}${5:, \'${6:message}\'})\n$0'
  'expect receive':
    'prefix': 'exrec'
    'body': 'expect(${1:target}).${2:not_}to receive(:${3:message})$4\n$0\n'
  'expect respond_to':
    'prefix': 'shnrt'
    'body': 'expect(${1:target}).${2:not_}to respond_to(:${3:message})$4\n$0\n'
  'expect satisfy':
    'prefix': 'exsa'
    'body': 'expect(${1:target}).${2:not_}to satisfy { |obj| $3 }\n$0'
  'expect throw':
    'prefix': 'exthr'
    'body': 'expect{ ${1:target} }.${2:not_}to throw_symbol(:${3:symbol})\n$0'
  'with args':
    'prefix': 'wia'
    'body': 'with(${1})$2'
  'expect render_template':
    'prefix': 'exrender'
    'body': 'expect(${1:target}).${2:not_}to render_template(:${1:template})\n$0'
  'specify':
    'prefix': 'spec'
    'body': 'Specify { ${1:behavior} }'
  'stub':
    'prefix': 'stu'
    'body': '${1:double}.stub(:${2:message})$3'
  'subject':
    'prefix': 'su'
    'body': 'subject(:${1:instance}) { $0 }'
  'after':
    'prefix': 'aft'
    'body': 'after${1:(${2::each})} do\n  $0\nend'
  'twice':
    'prefix': 'tw'
    'body': 'twice'
